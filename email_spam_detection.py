# -*- coding: utf-8 -*-
"""Email spam detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DGN8iBXZXf0MCuFiI2m9_Dk48B20_wy2

.....OASIS INFOBYTE....

...Email SPAM DETECTION ....TASK-3....
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""# IMPORTING  DATA SET.."""

em=pd.read_csv('mail_data.csv')
# print No of rows
em.head()

"""# ANALYZING DATASET """

em.describe()
em.isnull().sum()
em.shape
# label spam mails as 0 and ham mail as 1
em.loc[em['Category']== "spam",'Category']=0
em.loc[em['Category']=='ham','Category']=1
em.head()

# seprating training and test data
X = em['Message']
Y = em['Category']
print(X)
print(Y)

"""#### 4. Dividing the dataset for train and test data"""

X_train,X_test,Y_train,Y_test= train_test_split(X,Y, test_size=0.30, random_state=4)
print(X.shape)
print(X_train.shape)
print(X_test.shape)

"""#### 5. Feature Extraction """

# converting text to numeric values

feature_extraction= TfidfVectorizer(min_df = 1, stop_words='english', lowercase='True')

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# convert Y_train and Y_test values as integers

Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')
print(X_train)
print(X_train_features)

"""#### 6. Training the model"""

# logistic regression
model= LogisticRegression()
model.fit(X_train_features,Y_train)

"""#### 7. Evaluating Model"""

# prediction on training data

p_train = model.predict(X_train_features)
a_train = accuracy_score(Y_train, p_train)
print('Accuracy on training data : ', a_train)

# prediction on test data

p_train = model.predict(X_test_features)
a_train = accuracy_score(Y_test, p_train)
print('Accuracy on test data : ', a_train)

"""#### 8. Building predictive system """

input_mail = ["I've been searching for the right words to thank you for this breather. I promise i wont take your help for granted and will fulfil my promise. You have been wonderful and a blessing at all times"]

# convert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

# making prediction

prediction = model.predict(input_data_features)
print(prediction)


if (prediction[0]==1):
  print('it is a Ham mail')

else:
  print('it is a Spam mail')